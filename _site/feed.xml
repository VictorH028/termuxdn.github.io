<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-01-06T01:47:15-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Hacking Ético vs Termux</title><subtitle>Ciberseguridad desde Termux</subtitle><author><name>Demon Hunter</name></author><entry><title type="html">Boost Asio</title><link href="http://localhost:4000/boost-asio/" rel="alternate" type="text/html" title="Boost Asio" /><published>2023-12-29T00:00:00-05:00</published><updated>2023-12-29T00:00:00-05:00</updated><id>http://localhost:4000/boost-asio</id><content type="html" xml:base="http://localhost:4000/boost-asio/"></content><author><name>Demon Hunter</name></author><summary type="html"></summary></entry><entry><title type="html">Notas C++</title><link href="http://localhost:4000/notas-c++/" rel="alternate" type="text/html" title="Notas C++" /><published>2023-12-25T00:00:00-05:00</published><updated>2023-12-25T00:00:00-05:00</updated><id>http://localhost:4000/notas-c++</id><content type="html" xml:base="http://localhost:4000/notas-c++/">&lt;h1 id=&quot;declaracion-y-extructura-de-un-programa&quot;&gt;Declaracion y extructura de un programa&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Declaraciones&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Un programa de computadora es una secuencia de instrucciones que le dicen a la computadora qué hacer. Una &lt;strong&gt;declaración&lt;/strong&gt; es un tipo de instrucción que hace que el programa realice alguna acción&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;nota : La mayoría (pero no todas) las declaraciones en C++ terminan en punto y coma. Si ve una línea que termina en punto y coma, probablemente sea una declaración&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Funciones y función principal&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En C++, las declaraciones normalmente se agrupan en unidades llamadas &lt;strong&gt;funciones.&lt;/strong&gt; Una función es una colección de declaraciones que se ejecutan secuencialmente (en orden, de arriba a abajo).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Regala: Cada programa C++ debe tener una función especial llamada &lt;strong&gt;main&lt;/strong&gt; (todas las letras minúsculas). Cuando se ejecuta el programa, las declaraciones dentro de mainse ejecutan en orden secuencial.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Errores de sintaxis y sintaxis&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En inglés, las oraciones se construyen de acuerdo con reglas gramaticales específicas que probablemente aprendiste en la clase de inglés en la escuela. Por ejemplo, las oraciones normales terminan en un punto. Las reglas que gobiernan cómo se construyen las oraciones en un idioma se llaman &lt;strong&gt;sintaxis&lt;/strong&gt; . Si olvida el punto y ejecuta dos oraciones juntas, esto es una violación de la sintaxis del idioma inglés.&lt;/p&gt;

&lt;h1 id=&quot;comentarios&quot;&gt;Comentarios&lt;/h1&gt;

&lt;p&gt;Un comentario es una nota legible por el programador que se inserta directamente en el código fuente del programa. El compilador ignora los comentarios y son para uso exclusivo del programador&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;comentario de una sola linea&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;El &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;//&lt;/code&gt; símbolo comienza un comentario de una sola línea de C++, que le indica al compilador que ignore todo, desde el &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;//&lt;/code&gt;símbolo hasta el final de la línea. Por ejemplo:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hola Mundo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\\&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Esto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;es&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;un&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comentario&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;comentario de varias lineas&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;El par de símbolos &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/*&lt;/code&gt; y &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*/&lt;/code&gt; denota un comentario de varias líneas de estilo C. Todo lo que se encuentre entre los símbolos se ignora&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* Todo lo que
esta
aca es un comentario
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;⚠️ Advertencia: No utilice comentarios de varias líneas dentro de otros comentarios de varias líneas. Está bien incluir comentarios de una sola línea dentro de un comentario de varias líneas.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Nota : Comente su código generosamente y escriba sus comentarios como si hablara con alguien que no tiene idea de lo que hace el código. No asuma que recordará por qué tomó decisiones específicas.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;introducción-a-objetos-y-variables&quot;&gt;Introducción a objetos y variables&lt;/h1&gt;

&lt;p&gt;Los &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;datos&lt;/code&gt; son cualquier información que una computadora puede mover, procesar o almacenar.&lt;/p&gt;

&lt;p&gt;Un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;valor&lt;/code&gt; es una letra (p. ej. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt;), un número (p. ej. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;5&lt;/code&gt;), un texto (p. ej. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello&lt;/code&gt;) o una instancia de algún otro concepto útil que pueda representarse como datos.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;nota : Los programas son conjuntos de instrucciones que manipulan datos para producir un resultado deseado.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Memoria de acceso aleatorio&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La memoria principal de una computadora se llama memoria de acceso aleatorio (a menudo llamada &lt;a href=&quot;&quot;&gt;RAM&lt;/a&gt; para abreviar). Cuando ejecutamos un programa, el sistema operativo carga el programa en la &lt;em&gt;RAM&lt;/em&gt;. Cualquier dato que esté codificado en el propio programa (por ejemplo, texto como “¡Hola, mundo!”) se carga en este punto.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Objetos y variables&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En C++, se desaconseja el acceso directo a la memoria. En cambio, accedemos a la memoria indirectamente a través de un objeto. Un objeto es una región de almacenamiento (normalmente memoria) que puede almacenar un valor y tiene otras propiedades asociadas.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Creación de instancias variables&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para crear una variable, utilizamos un tipo especial de declaración llamada &lt;strong&gt;definición&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ejemplo de cómo definir una variable denominada &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Define una variable x de tipo int&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Nota: Cuando se ejecuta el programa (llamado &lt;strong&gt;tiempo de ejecución&lt;/strong&gt; ), se creará una instancia de la variable. La creación de instancias es una palabra elegante que significa que el objeto se creará y se le asignará una dirección de memoria. Se deben crear instancias de las variables antes de poder usarlas para almacenar valores. A modo de ejemplo, digamos que se crea una instancia de la variable x en la ubicación de memoria 140. Siempre que el programa use la variable x, accederá al valor en la ubicación de memoria 140. Un objeto instanciado a veces se denomina instancia .&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Tipos de datos&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En C++, el tipo de una variable debe conocerse en &lt;strong&gt;tiempo de compilación&lt;/strong&gt; (cuando se compila el programa), y ese tipo no se puede cambiar sin volver a compilar el programa. Esto significa que una variable entera sólo puede contener valores enteros. Si desea almacenar algún otro tipo de valor, deberá utilizar un tipo diferente.&lt;/p&gt;

&lt;h1 id=&quot;asignación-e-inicialización-de-variables&quot;&gt;Asignación e inicialización de variables&lt;/h1&gt;

&lt;h1 id=&quot;412--introducción-a-la-conversión-de-tipos-y-static_cast&quot;&gt;4.12  Introducción a la conversión de tipos y &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;static_cast&lt;/code&gt;&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Conversión de tipo implícita&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cuando el compilador realiza una conversión de tipos en nuestro nombre sin que se lo solicitemos explícitamente, a esto lo llamamos &lt;strong&gt;conversión de tipos implícita&lt;/strong&gt; .&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Nota: Algunas conversiones de tipos siempre son seguras (como inta double), mientras que otras pueden provocar que el valor cambie durante la conversión (como doublea int). Las conversiones implícitas inseguras normalmente generarán una advertencia del compilador o (en el caso de la inicialización de llaves) un error.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Esta es una de las razones principales por las que la inicialización con llaves es la forma de inicialización preferida. La inicialización de llaves garantizará que no intentemos inicializar una variable con un inicializador que perderá valor cuando se convierta implícitamente:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// okay: int to double is safe&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;5.5&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// error: double to int not safe&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;una-introducción-a-la-conversión-de-tipos-explícita-a-través-del-operador-static_cast&quot;&gt;Una introducción a la conversión de tipos explícita a través del operador &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;static_cast&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;C++ admite un segundo método de conversión de tipos, llamado conversión de tipos explícita. &lt;strong&gt;La conversión de tipos explícita&lt;/strong&gt; nos permite (al programador) decirle explícitamente al compilador que convierta un valor de un tipo a otro, y que asumimos toda la responsabilidad por el resultado de esa conversión (lo que significa que si la conversión resulta en la pérdida de valor, es culpa nuestra).&lt;/p&gt;

&lt;p&gt;Para realizar una conversión de tipo explícita, en la mayoría de los casos usaremos el &lt;em&gt;static_castoperador&lt;/em&gt;. La sintaxis parece &lt;strong&gt;static_cast&lt;/strong&gt; un poco divertida:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static_cast&amp;lt;nuevo_tipo&amp;gt;(expresión)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;static_cast&lt;/strong&gt; toma el valor de una expresión como entrada y devuelve ese valor convertido al tipo especificado por &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new_type&lt;/code&gt; (por ejemplo, int, bool, char, double).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Convertir números sin signo a números con signo&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;usingend&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)};&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Nota: El operador   &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;static_cast&lt;/code&gt; producirá un comportamiento indefinido si el valor que se está convirtiendo no encaja en el rango del nuevo tipo.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;21-conceptos-básicos-de--funciones-y-archivo&quot;&gt;2.1 Conceptos básicos de  funciones y archivo&lt;/h1&gt;

&lt;p&gt;Como avia mencionado anterior mente una función es una colección de declaraciones que se ejecutan secuencialmente.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;sintaxis más básica para definir una función&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;retunType&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;functionName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// body&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;Nota : Una funcion puede llamar otra funcion&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sdt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Salida:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;a
b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Nota: Las funciones anidadas no son compatibles&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;116--plantillas-de-funciones&quot;&gt;11.6 — Plantillas de funciones&lt;/h1&gt;

&lt;p&gt;En C++, el sistema de plantillas fue diseñado para simplificar el proceso de creación de funciones (o clases) que puedan trabajar con diferentes tipos de datos&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;: Nota  El compilador puede usar una única plantilla para generar una familia de funciones o clases relacionadas, cada una usando un conjunto diferente de tipos&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// esta es la declaración del parámetro de plantilla&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&quot;117--creación-de-instancias-de-plantilla-de-función&quot;&gt;11.7 — Creación de instancias de plantilla de función&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Usando una plantilla de función&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Para usar nuestra &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max&amp;lt;T&amp;gt;&lt;/code&gt;  plantilla de funciones, podemos realizar una llamada de función con la siguiente sintaxis:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max&amp;lt;tipo_actual&amp;gt;(arg1, arg2); // tipo_actual es algún tipo real, como int o double&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Podemos usar la &lt;strong&gt;deducción de argumentos de plantilla&lt;/strong&gt; para que el compilador deduzca el tipo real que debe usarse a partir de los tipos de argumentos. en la llamada a la función.&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Mejores prácticas
Favorezca la sintaxis de llamada de función normal al realizar llamadas a una función instanciada a partir de una plantilla de función (a menos que necesite que se prefiera la versión de la plantilla de función a una función coincidente que no sea de plantilla).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Usar plantillas de funciones en múltiples archivos&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;La forma más convencional de abordar este problema es colocar todo el código de la plantilla en un archivo de encabezado (.h) en lugar de un archivo fuente (.cpp):&lt;/p&gt;

&lt;h1 id=&quot;141--introducción-a-la-programación-orientada-a-objetos&quot;&gt;14.1 — Introducción a la programación orientada a objetos&lt;/h1&gt;

&lt;h1 id=&quot;206---introducción-a-lambdas-funciones-anónimas&quot;&gt;20.6 - Introducción a lambdas (funciones anónimas)&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Lambdas son funciones anónimas&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Una expresión lambda (también llamada lambda o cierre ) nos permite definir una función anónima dentro de otra función. El anidamiento es importante, ya que nos permite evitar la contaminación de nombres de espacios de nombres y definir la función lo más cerca posible de donde se usa (proporcionando contexto adicional).&lt;/p&gt;

&lt;p&gt;La sintaxis de lambdas es una de las cosas más extrañas en C++ y requiere un poco de tiempo para acostumbrarse. Lambdas toman la forma:&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;captureClause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;par&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;á&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tipo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;de&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;retorno&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;declaraciones&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;La cláusula de captura puede estar vacía si no se necesitan capturas.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;La lista de parámetros puede estar vacía si no se requieren parámetros. También se puede omitir por completo a menos que se especifique un tipo de devolución&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;El tipo de devolución es opcional y, si se omite, autose asumirá (por lo tanto, se utilizará la deducción de tipo utilizada para determinar el tipo de devolución). Si bien anteriormente señalamos que se debe evitar la deducción de tipos para los tipos de retorno de funciones, en este contexto, está bien usarla (porque estas funciones suelen ser muy triviales).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;También tenga en cuenta que las lambdas (al ser anónimas) no tienen nombre, por lo que no es necesario que proporcionemos uno.&lt;/p&gt;

&lt;h1 id=&quot;211--introducción-a-la-sobrecarga-del-operador&quot;&gt;21.1 — Introducción a la sobrecarga del operador&lt;/h1&gt;

&lt;p&gt;El uso de la sobrecarga de funciones para sobrecargar operadores se denomina sobrecarga de operadores .&lt;/p&gt;</content><author><name>Demon Hunter</name></author><summary type="html"></summary></entry><entry><title type="html">desktop</title><link href="http://localhost:4000/desktop-linux/" rel="alternate" type="text/html" title="desktop" /><published>2023-10-10T00:00:00-04:00</published><updated>2023-10-10T00:00:00-04:00</updated><id>http://localhost:4000/desktop-linux</id><content type="html" xml:base="http://localhost:4000/desktop-linux/">&lt;p&gt;Para mostrar tu aplicaciones en el menu  de Linux, puedes crear un archivo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.desktop&lt;/code&gt;. Estos archivos se utilizan para definir las propiedades de una aplicación y cómo se mostrará en el menú de aplicaciones. A continuación, te proporciono un ejemplo de cómo crear un archivo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.desktop&lt;/code&gt;.:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Abre un editor de texto y crea un archivo llamado &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mi_programa.desktop&lt;/code&gt; con el siguiente contenido:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&quot;language-desktop&quot;&gt;[Desktop Entry]
Type=Application
Name=Mi Programa
Exec=/ruta/a/tu/programa
Icon=/ruta/a/una/imagen/icono.png
Terminal=false
Categories=Development;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Asegúrate de reemplazar &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/ruta/a/tu/programa&lt;/code&gt; con la ruta completa de la aplicación que deseas ejecutar y &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/ruta/a/una/imagen/icono.png&lt;/code&gt; con la ruta completa de la imagen de icono que deseas utilizar para tu aplicación.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Guarda el archivo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mi_programa.desktop&lt;/code&gt; en el directorio &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.local/share/applications&lt;/code&gt; para que esté disponible solo para tu usuario, o en &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/share/applications&lt;/code&gt; si deseas que esté disponible para todos los usuarios en el sistema.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Asegúrate de que el archivo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.desktop&lt;/code&gt; tenga permisos de ejecución. Puedes hacerlo con el siguiente comando en la terminal:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;chmod +x /ruta/a/tu/archivo.desktop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Después de hacer esto, deberías ver “Mi Probgrama” en el menú de aplicaciones de tu entorno de escritorio Linux, y al hacer clic en él, se ejecutará tu programa.&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;Nota: Asegúrate de que el archivo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.desktop&lt;/code&gt; tenga los permisos adecuados y que la ruta a tu programa y al icono sean correctas para que funcione correctamente. El &lt;em&gt;icono debe ser una imagen en formato PNG de 48x48 píxeles&lt;/em&gt; (aunque puedes ajustar el tamaño según tus necesidades).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Este es un ejemplo simple de cómo crear un acceso directo en el menú de aplicaciones en Linux para tu programa.&lt;/p&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;
    (function() { // DON&apos;T EDIT BELOW THIS LINE
    var d = document, s = d.createElement(&apos;script&apos;);
    s.src = &apos;https://blok-termux.disqus.com/embed.js&apos;;
    s.setAttribute(&apos;data-timestamp&apos;, +new Date());
    (d.head || d.body).appendChild(s);
    })();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;</content><author><name>Demon Hunter</name></author><category term="notas" /><category term="Linux" /><category term="tips" /><summary type="html">Para mostrar tu aplicaciones en el menu de Linux, puedes crear un archivo .desktop. Estos archivos se utilizan para definir las propiedades de una aplicación y cómo se mostrará en el menú de aplicaciones. A continuación, te proporciono un ejemplo de cómo crear un archivo .desktop.:</summary></entry><entry><title type="html">Resaltado de sintaxis en C++</title><link href="http://localhost:4000/C++_sintaxis/" rel="alternate" type="text/html" title="Resaltado de sintaxis en C++" /><published>2023-07-05T00:00:00-04:00</published><updated>2023-07-05T00:00:00-04:00</updated><id>http://localhost:4000/C++_sintaxis</id><content type="html" xml:base="http://localhost:4000/C++_sintaxis/">&lt;p&gt;Esto es un pequeño ejemplo de como crear un resaltado de sintaxis en C++&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream &amp;gt;
#include &amp;lt;string&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Color&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;Black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;Red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;Green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;Yellow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;Blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;Magenta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;Cyan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;White&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; 
&lt;span class=&quot;nf&quot;&gt;setColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; 
&lt;span class=&quot;nf&quot;&gt;syntax_highlight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  


&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codigo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;R&quot;(
#include &amp;lt;iostream&amp;gt;

int main() {
    // Esto es un comentario
    std::cout &amp;lt;&amp;lt; &quot;Hola, mundo!&quot; &amp;lt;&amp;lt; std::endl;
    return 0;
}
)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;setColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\033&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Negro&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;30&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// Rojo&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;31&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Verde&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;32&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Yellow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// Amarillo&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;33&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Azul&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;34&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Magenta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// Magenta&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;35&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cyan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// cian&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;36&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;White&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Blanco &lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;37&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;default:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;m&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; 


&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;syntax_highlight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;highlightedCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Colores para cada parte del código&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colorKeywords&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colorStrings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colorComments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Magenta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colorDefault&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Buscar en la cadena &lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Comentario&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Si no hay coincidencias&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;npos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;highlightedCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colorComments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colorDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isalpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Palabra clave&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isalnum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;_&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyword&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;highlightedCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colorKeywords&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;keyword&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colorDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;&quot;&apos;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;&apos;\&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Cadena de caracteres&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delimiter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delimiter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;highlightedCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colorStrings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colorDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Otros caracteres&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;highlightedCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;highlightedCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;
    (function() { // DON&apos;T EDIT BELOW THIS LINE
    var d = document, s = d.createElement(&apos;script&apos;);
    s.src = &apos;https://blok-termux.disqus.com/embed.js&apos;;
    s.setAttribute(&apos;data-timestamp&apos;, +new Date());
    (d.head || d.body).appendChild(s);
    })();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;</content><author><name>Demon Hunter</name></author><category term="Programacion" /><category term="termux" /><category term="linux" /><summary type="html">Esto es un pequeño ejemplo de como crear un resaltado de sintaxis en C++</summary></entry><entry><title type="html">RSA</title><link href="http://localhost:4000/RSA/" rel="alternate" type="text/html" title="RSA" /><published>2023-05-25T00:00:00-04:00</published><updated>2023-05-25T00:00:00-04:00</updated><id>http://localhost:4000/RSA</id><content type="html" xml:base="http://localhost:4000/RSA/">&lt;p&gt;En esta oportinidad le enseñare como cifrará un archivo y la creacion de tu llave publia y tu llave privada en unos simple pasos.&lt;/p&gt;

&lt;p&gt;Antes asegurarse de que tienes OpenSSL instalado. Si no dispones del mismo, se puede instalar esta herramienta con el siguiente comando:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt update
apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;openssl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;clave-privada&quot;&gt;Clave privada&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Podemos  generar un llaves RSA privada con el siguiente comando en la terminal:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl genrsa &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; clave_privada.pem 2048
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;El número &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2048&lt;/code&gt; es la longitud de la clave. Si necesitas una clave más larga, puedes cambiar este valor.&lt;/p&gt;

&lt;h1 id=&quot;clave-publia&quot;&gt;Clave publia&lt;/h1&gt;

&lt;p&gt;Para extraer la clave pública de la clave privada que acabamos  de generar.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;El siguiente comando utilizará la clave privada que acabamos de generar para obtener la clave pública:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl rsa &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; clave_privada.pem &lt;span class=&quot;nt&quot;&gt;-pubout&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; clave_publica.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;El archivo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clave_publica.pem&lt;/code&gt; contendrá ahora la clave pública que necesitas para cifrar un archivo utilizando RSA.&lt;/p&gt;

&lt;h1 id=&quot;cifrar-el-archivo-utilizando-la-clave-pública&quot;&gt;Cifrar el archivo utilizando la clave pública.&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;El siguiente comando cifrará el archivo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;archivo_a_cifrar&lt;/code&gt;  utilizando la clave pública contenida en el archivo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clave_publica.pem&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl rsautl &lt;span class=&quot;nt&quot;&gt;-encrypt&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; archivo_a_cifrar &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; archivo_cifrado &lt;span class=&quot;nt&quot;&gt;-inkey&lt;/span&gt; clave_publica.pem &lt;span class=&quot;nt&quot;&gt;-pubin&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;El archivo cifrado resultante se almacenará en el archivo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;archivo_cifrado&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Es importante tener en cuenta que la clave privada que se ha utilizado para generar la clave pública, debe mantenerse en un lugar seguro y no debe ser distribuida. Sólo la clave pública debe ser compartida con aquellos que necesitan cifrar información para que la persona que posee la clave privada pueda descifrar la información cifrada utilizando sus funciones privadas.&lt;/p&gt;

&lt;h1 id=&quot;de-sesencriptar-el-archivo-en-rsa&quot;&gt;De sesencriptar el archivo en RSA&lt;/h1&gt;

&lt;p&gt;Para desencriptar un archivo utilizando RSA, necesitarás los siguientes elementos:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;La clave pública que se utilizó para cifrar el archivo.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;El archivo cifrado que se desea desencriptar.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Antes de comenzar, es importante señalar que la operación de desencriptación se suele hacer en local y no suele ser una buena práctica compartir información de este tipo con terceros.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Tener a la mano el archivo cifrado y la clave pública que se utilizó para cifrar. Esta debe estar en un archivo llamado &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clave_publica.pem&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Finalmente, ejecutar el siguiente comando para obtener el texto claro:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl rsautl &lt;span class=&quot;nt&quot;&gt;-decrypt&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-in&lt;/span&gt; archivo_cifrado &lt;span class=&quot;nt&quot;&gt;-inkey&lt;/span&gt; public_key.pem &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; archivo_plano
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Donde &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;archivo_cifrado&lt;/code&gt; es el archivo que deseas desencriptar y que debería haber llegado junto con la clave pública, y &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;archivo_plano&lt;/code&gt; es el archivo donde se almacenará el resultado del proceso de desencriptación.&lt;/p&gt;

&lt;p&gt;También puedes especificar la ruta completa del archivo si no está en la carpeta actual.&lt;/p&gt;

&lt;p&gt;Una vez ejecutado este comando, el archivo resultante debería contener el texto claro del archivo archivo_cifrado.&lt;/p&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;
    (function() { // DON&apos;T EDIT BELOW THIS LINE
    var d = document, s = d.createElement(&apos;script&apos;);
    s.src = &apos;https://blok-termux.disqus.com/embed.js&apos;;
    s.setAttribute(&apos;data-timestamp&apos;, +new Date());
    (d.head || d.body).appendChild(s);
    })();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;</content><author><name>Demon Hunter</name></author><category term="" /><category term="" /><category term="RSA" /><summary type="html">En esta oportinidad le enseñare como cifrará un archivo y la creacion de tu llave publia y tu llave privada en unos simple pasos.</summary></entry><entry><title type="html">i-Haklab</title><link href="http://localhost:4000/i-Haklab/" rel="alternate" type="text/html" title="i-Haklab" /><published>2023-04-29T00:00:00-04:00</published><updated>2023-04-29T00:00:00-04:00</updated><id>http://localhost:4000/i-Haklab</id><content type="html" xml:base="http://localhost:4000/i-Haklab/">&lt;header&gt;
    &lt;nav&gt;
        &lt;ul&gt;
		&lt;li&gt;&lt;a href=&quot;#-intalacion&quot;&gt;Inicio&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href=&quot;#&quot;&gt;Tutoriales&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href=&quot;#&quot;&gt;Cursos&lt;/a&gt;&amp;lt;/l&amp;gt;
		&lt;li&gt;&lt;a href=&quot;#&quot;&gt;Bootcamps&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href=&quot;#&quot;&gt;Contacto&lt;/a&gt;&lt;/li&gt;
	 &amp;lt;/ul&amp;gt;
    &amp;lt;/nav&amp;gt;
&amp;lt;/header&amp;gt;

⚠️⚠️    **Toda la ducumentacion aca vista esta en purono desaroyo**  ⚠️⚠️

&amp;gt; Nota : Pero la gran parte esta disponible 

i-Haklab es un _laboratorio_ de [hacking]() para [Termux]()  que que nos ofrece de manera ordenada y secuencial un conjunto  herramientas de código abierto para pentesting, que nos proporciona mas de **100 herramientas/marcos** que no estan disponible en termux. 

![Imagen]()

# 📥 Intalacion 

Su intalacion no es como estamos acostumbrados hacer avitual mente de *clonar*  un repocitorio. [Termux ]() cuenta en su alvor de directorio con un **sources.list** en la sigiente ruta `$PREFIX/etc/apt/`   el cual nos permite descarga paquetes de uno o más repositorios de software (fuentes) y los instalarlos que dichos paquetes que anterior mente le mensionaba que son mas de 100 son mantenidos por Ivam para una intalacion limpia en nuestro emulador de entorno Linux atraver de APT que es el principal administrador de paquetes de línea de comandos.

```zsh 
apt install wget -y
mkdir -p $PREFIX/etc/apt/sources.list.d
wget https://raw.githubusercontent.com/ivam3/termux-packages/gh-pages/ivam3-termux-packages.list -O $PREFIX/etc/apt/sources.list.d/ivam3-termux-packages.list
apt update
apt upgrade
apt install i-haklab
```

# 🗄️ Herramientas

Fueron creadas para el  propósito de ofrecer acceso fácil y rápido a la instalación de herramientas y / o marcos proporcionados
para el laboratorio de seguridad cibernética y de Pentesting `I-Haklab`, para el sistema operativo Android en la aplicación Termux.

Para ver lista 👉 [aqui](https://github.com/ivam3/termux-packages)

# 👨‍🎓Aprendizaje

Para su cultura persolan y para mi vivencia de cada dia.

- 

- [Learnig NVIM ](https://victorhck.gitbook.io/aprende-vim) 

-


# 🛠️ Uso

```shell 
❯ i-haklab --help
```


# 📖 Editores de texto 

Contamos con dos editores total mente configurados para usted unos de esto es [nvim]() y el otroe [helix]() de los cuales les compartire parte de su configuración ysus combinaciones de tecla. 

![nvim](path) 

![helix](path) 

## Configuracion 

Esto que estan viendo a continuacion es el  arbol  de directorios de la configuración de `nvim`. No dare de talle de la configuración comotal pero si saves lo que estas hacien te invito a ver el codigo el cual me he eforzado en comentar para un buen entendimiento.


```shell 
.config/nvim
├── init.lua
└── lua                                                                        ├── keymaps.lua
    ├── plugins
    │   ├── 1
    │   ├── blankline.lua                                                      │   ├── bufferline.lua
    │   ├── git.lua
    │   ├── lsp-zero.lua
    │   ├── lualine.lua
    │   ├── neural.lua
    │   ├── packer.lua
    │   ├── telescope.lua
    │   ├── toggleterm.lua
    │   ├── tokyonight.lua
    │   ├── tree.lua
    │   └── zk.lua
    └── settings.lua
```

- `keymaps.lua`: Configuracion de teclas
- `settings.lua`: Configuracion de algunos rasgos del algunos plugins
- `plugins`: Directorio que contiene las configuración de los plugins por separado- `init.lua`: Archivo principal

### Atajos de tecla

Neovim no tiene suficientes, tenemos que crear más. Para esto debemos aprender a usar la función `vim.keymap.set`.  

Les mostraré un ejemplo.

```shell
vim.keymap.set(&apos;n&apos;, &apos;&lt;space&gt;w&apos;, &apos;&lt;cmd&gt;write&lt;cr&gt;&apos;, {desc = &apos;Guardar&apos;})
```

Después de ejecutar esta función la combinación `Espacio + w` nos permitirá usar el comando `write`. 

Podremos **guardar el archivo actual** con `Espacio + w`.

Ahora déjenme explicarles qué hace cada parámetro.

```shell
vim.keymap.set({mode}, {lhs}, {rhs}, {opts})
```

- `{mode}` es el modo donde tendrá efecto nuestro atajo (puede ser una lista de modos).

Pero no necesitamos nombres, necesitamos la abreviación. 

Estas son las más comunes.

`n`: Modo normal.

`i`: Modo de inserción.

`x`: Modo visual.

`s`: Modo de selección.

`v`: Visual y selección.

`t`: Modo de terminal.

`o`: Modo de espera de operador.

`&apos;&apos;`: Sí, una cadena de texto vacía. Es el equivalente a `n + v + o`.


- `{lhs}` es el atajo que queremos crear.

- `{rhs}` es la acción que queremos ejecutar. Puede ser un comando, una expresión o una función de lua.

- `{opts}` este parámetro debe ser una tabla de lua. Si no saben qué es una tabla, sólo piensen que es una manera albergar varios tipos de datos en un lugar. En fin, estas son las propiedades de uso común.


`desc`: Cadena de texto que describe qué hace el comando. Aquí podemos escribir cualquier cosa.

`remap`: Booleano que controla si nuestro atajo debe ser recursivo. Su valor por defecto es false. Los atajos recursivos pueden crear conflictos, así que no lo habiliten si no saben todos los detalles de lo que quieren lograr. Luego les explico con más detalle.

`buffer`: Puede ser un Booleano o un número. Si el valor es el booleano true quiere decir que al atajo sólo tendrá efecto en el archivo actual. Si es un número deberá ser el &quot;id&quot; de un archivo que tenemos abierto.

`silent`: Booleano que controla si el atajo puede mostrar un mensaje. Su valor por defecto es false.

`expr`: Booleano. Si lo habilitamos tendremos la posibilidad de usar vimscript o lua para generar el valor del parámetro {rhs}. Su valor por defecto es false

### La tecla líde

Cuando definimos nuestros atajos podemos usar la secuencia especial `&lt;leader&gt;` en el parámetro `{lhs}`, esta toma el valor que tenemos en la variable global `mapleader` la misma se encuentra en `settings.lua`.

**Mapleader** es una variable que debe ser una cadena texto. Por ejemplo.

```shell
vim.g.mapleader = &apos;,&apos;
```

Con esto podríamos usar la tecla `,` como un prefijo para nuestros atajos.

```shell
vim.keymap.set(&apos;n&apos;, &apos;&lt;leader&gt;w&apos;, &apos;&lt;cmd&gt;write&lt;cr&gt;&apos;)
```
Y así la secuencia `, + w` guarda el archivo actual.

###  init.lua

El administrador de `plugins` que posehemos es [lazy.nvim](https://github.com/folke/lazy.nvim).


![image](https://user-images.githubusercontent.com/292349/208301737-68fb279c-ba70-43ef-a369-8c3e8367d6b1.png)


Nuestra especificasion de la ruta donde se intla nuestros plugins es.

```shell
lazy.path = vim.fn.stdpath(&apos;data&apos;) .. &apos;/lazy/lazy.nvim&apos;
lazy.opts = {}

lazy.setup({
  ---
  -- Lista de plugins
  ---
})
```
Aquí utilizamos `stdpath(&apos;data&apos;)` para que la ruta de los plugins quede en una carpeta manejada por Neovim. Ustedes pueden cambiar la ruta si quieren. Pero de esta manera no tenemos que preocuparnos por cambiar la ruta dependiendo del sistema operativo donde estamos.

Si quieren saber donde estarán los plugins usen este comando.

```shell
:echo stdpath(&apos;data&apos;) . &apos;/lazy/lazy.nvim&apos;
```

### Plugins  

1) [zk-nvim](https://github.com/mickael-menu/zk-nvim)

Este plugins es para el [`zk`](https://github.com/mickael-menu/zk) asistente de toma de notas en texto plano.

2) [vim-grammarous](https://github.com/rhysd/vim-grammarous)

vim-grammarous es un potente corrector gramatical para Vim. Simplemente hazlo `:GrammarousCheck` para ver la poderosa verificación.
Este complemento descarga automáticamente [LanguageTool](https://www.languagetool.org/) , que requiere Java 8+.

![pantalla de demostración](https://github.com/rhysd/ss/blob/master/vim-grammarous/demo.gif?raw=true)

3) [tokyonight.nvim](https://github.com/folke/tokyonight.nvim)

Para temas

![image](https://user-images.githubusercontent.com/292349/190951628-10ba28a1-57ff-4479-8eab-47400a402242.png)


4) [lualine.nvim](https://github.com/nvim-lualine/lualine.nvim)

Una línea de estado de Neovim increíblemente rápida y fácil de configurar escrita en Lua.

- [evil_lualine](examples/evil_lualine.lua)
  &lt;img width=&quot;700&quot; src=&quot;https://user-images.githubusercontent.com/13149513/113875129-4453ba00-97d8-11eb-8f21-94a9ef565db3.png&quot; /&gt;

5) [telescope.nvim]()

`telescope.nvim` es un buscador difuso altamente extensible sobre listas. Construido sobre las últimas características impresionantes del neovimnúcleo. El telescopio se centra en la modularidad, lo que permite una fácil personalización.

![Preview](https://i.imgur.com/TTTja6t.gif)

6) [LuaSnip](https://github.com/L3MON4D3/LuaSnip)

Transformaciones de texto usando funciones Lua.

7) [indent-blankline.nvim](https://github.com/lukas-reineke/indent-blankline.nvim)

Este complemento agrega guías de sangría a Neovim.

&lt;img width=&quot;900&quot; src=&quot;https://github.com/lukas-reineke/indent-blankline.nvim/assets/12900252/69ca7bb2-e294-4437-818b-8b47e63244b3&quot; alt=&quot;Screenshot&quot; /&gt;

De querér personalizar algo por su cuenta de este complemento le recomiendo ejecutar `:help ibl.config.scope` y echarle una leída. 

8)  [toggleterm.nvim](https://github.com/akinsho/toggleterm.nvim)

Un complemento de neovim para persistir y alternar entre múltiples terminales durante una sesión de edición

![toggleterm in action](https://user-images.githubusercontent.com/22454918/224485816-8b0cb1b8-b0e6-4da6-9d71-a7299d39f1a0.gif) 


9)  [neural](https://github.com/dense-analysis/neural)

¡Un complemento ChatGPT Vim, un complemento OpenAI Neovim y mucho más! Neural integra varias herramientas de aprendizaje automático para que puedas dejar que la IA escriba código por ti en Vim/Neovim, entre otras cosas útiles.

10) [nui.nvim](https://github.com/MunifTanjim/nui.nvim)

Biblioteca de componentes de interfaz de usuario para Neovim.

![Diseño GIF](https://github.com/MunifTanjim/nui.nvim/wiki/media/layout.gif)

11) [significant.nvim](https://github.com/ElPiloto/significant.nvim)

😬 Cuando tienes algo importante que decir


12) [lsp-zero.nvim](https://github.com/VonHeikemen/lsp-zero.nvim)

Colección de funciones que le ayudarán a configurar el cliente LSP de Neovim, para que pueda obtener funciones similares a IDE con el mínimo esfuerzo.

### ⌨️ keymap nvimm

Una vez tenemos abierto vim y estamos editando un archivo debemos conocer diversos comandos para poder utilizar el entorno. El editor se puede encontrar en 3 modos diferentes:

- Modo `normal` (Normal mode): Se pueden utilizar ciertas combinaciones de teclas para realizar ciertas acciones. Para acceder a este modo presionar escape.

- Modo inserción (Insertion mode): Se puede insertar (insert) o sobreescribir el texto (append). Para acceder a este modo presionar `i` , `c`  o la tecla `insert`  (1 vez = insert, 2 veces = append).

- Modo comando (Command mode): Se puede utilizar cualquier comando SED además de funciones propias de Vim. Para acceder a este modo se debe estar en modo normal y pulsar `:` , a continuación se escribirá nuestra petición.

- Modo visual (visual mode): Se puede selecionar texto para tratarlo en conjunto. Para acceder a este modo se debe estar en modo normal y pulsar `v`.

- Modo terminal

#### Modo Normal

- `G`  : Ultima linea
- `gg` : Primera linea
- `u`  : Deshacer ultimo cambio
- `CTRL+r`: Rehacer
- `/texto[ENTER]` : Buscar texto
- `p`: Pegar el texto copiado o cortado
- `&lt;leader&gt;+p`: Pegar el texto desde el portapapeles del sistema (teclear el + también)
- `%` : Buscar el texto donde se encuentra el cursor
- `n` : Repetur ultima busqueda
- `CTRL+ws` : Dividir la pantalla horizontalmente en 2
- `CTRL+wv` : Dividir la pantalla verticalmente en 2
- `CTRL+wn` : Crear un nuevo archivo en una pantalla dividida horizontalmente
- `CTRL+wq` : Cerrar la división actual
-  `CTRL+w{j,k,h,l}`  ó `CTRL+w{cursores del teclado}` : Moverse a la ventana de arriba 
- `CTRL+w=` : Hacer todas las ventanas del mismo tamaño
- `ggVG`    : Seleccionar todo el texto
- `ma`      : Establecer una marca con el nombre `a`
- `&apos;a`      : Ir al la marca `a` 
- `&lt;leader&gt;ei`: Abrir archivo de configuración `init.lua`
- `&lt;leader&gt;qq`: Cerrar neovim sin guardar
- `&lt;leader&gt;w`: Guardar cambios
- `&lt;leader&gt;x`: Guardar cambios y Cerrar neovim

#### Modo Inserción


#### Modo comando

- `:26` : Ir al la linea 25
- `:q`  : Salir
- `:qa` : Salir cerrando todo lo abierto
- `q!`  : Salir sin quardar
- `:w [name]` : Guardar con otro nombre
- `:e archivo` : Editar archivo
- `:new` : Crea nueva pantalla dividida
- `:only` : Quedarse solo con la ventana actual y ocultar el resto
- 
##### Substituir una cadena

- `:%s/A/B/g`   : Substituir una cadena de texto A por B en todo el texto
- `:2,3s/A/B/g` : Substituir una cadena de texto A por B entre la linea 2 y 10

#### Modo Visual

- `y`: Copiar el texto seleccionado  
- `&lt;leader&gt;+y&quot;`: Copiar el texto selecionado en el portapapeles del sistema (teclear el + también)  
- `d`: Copiar texto selecionado  


##### Corrector ortográfico

Por defecto, vim dispone de corrector para Inglés pero si activamos otros idiomas, el editor nos pregunará si deseamos descargar los correspondientes diccionarios automáticamente.

Activar corrector
`:set spell`

Desactivar corrector
`:set nospell`

Seleccionamos idioma
```
:set spelllang=es
:set spelllang=ca
:set spelllang=en
:set spelllang=fr
```

Las palabras incorrectas se marcaran en color rojo y podremos interaccionar en modo normal:

Siguiente palabra incorrecta
``]s``

Previa palabra incorrecta
``[s``

Sugerencias de corrección para una palabra
``z=``

Añadir una palabra al diccionario
``zg``

Borrar una palabra del diccionario
``zw``

#### Buffer 

- `&lt;C-b&gt;n`,`&lt;C-b&gt;p`: Moverse entre búffer 
- `&lt;C-b&gt;q`: Cerrer el buffer actual





#### cmp y luasnip

- `K`: Muestra información sobre símbolo debajo del cursor
 


#### Telescope

- `&lt;leader&gt;&lt;space&gt;`: Muestra la lista de archivos abiertos.

- `&lt;leader&gt;?`: Muestra el historial de archivos.

- `&lt;leader&gt;ff`: Muestra los archivos del directorio de trabajo actual

- `&lt;leader&gt;fg`: Ejecuta una búsqueda interactiva en cada línea código de cada archivo en el directorio actual.

- `&lt;leader&gt;fd`: Muestra la lista de &quot;**diagnósticos**&quot; del archivo actual. Un diagnóstico puede ser un error de sintaxis, una advertencia o una sugerencia.

- `&lt;leader&gt;fs`: Ejecuta una búsqueda interactiva en el archivo actual

#### Neural

- `&lt;leader&gt;n`: Activa interaccion con chatGPT de openAI con neura

- Activar / desactivar fondo transparente
```
vim.keymap.set(&apos;n&apos;, &apos;&lt;leader&gt;be&apos;, &apos;&lt;cmd&gt;TransparentEnable&lt;cr&gt;&apos;)
```
```
vim.keymap.set(&apos;n&apos;, &apos;&lt;leader&gt;bd&apos;, &apos;&lt;cmd&gt;TransparentDisable&lt;cr&gt;&apos;)
```
```
vim.keymap.set(&apos;n&apos;, &apos;&lt;leader&gt;bt&apos;, &apos;&lt;cmd&gt;TransparentToggle&lt;cr&gt;&apos;)
```

### Markdown Syntax: Basics

- Plain text (two paragraphs):

```
This is first paragraph.

And this is second paragraph.
``` 

- Italic:

```
Text enclosed in *single asterisks* or _single underscores_ is recognized
as an emphasis, and it usually gets rendered as an italic text.
```
![Italic](path) 

- Bold:

```
Similarly, text enclosed in **double asterisks** or __double underscores__
is recognized as a strong emphasis, and it usually gets rendered as a bold
text.
```
![bold](path)


- Bold italic:

```
*Italic* and **bold text** can be combined into ***bold italic***, even 
__in quite a _complicated_ ways__.
```
![Bold italic](path) 

- Headings

```
# Header level 1
## Header level 2
### Header level 3
#### Header level 4
##### Header level 5
###### Header level 6

First two header level may alternatively be written using an underline:

Header level 1
==============

Header level 2
--------------
```

- Link

```
Inline link: [link text](http://www.example.com)

Or link using a reference definition:

[Reference link][1]

[1]: http://www.example.com
```

![Linsk](path) 


- Unordered list

```
* List item 1
* List item 2
* List item 3

or

- List item 1
- List item 2
- List item 3
```
![Unordered](path) 

- Ordered lists

```
1. List item 1
2. List item 2
3. List item 3

or

1) List item 1
2) List item 2
3) List item 3
```

- Nested lists

```
* Foo
  * Foo&apos;s subitem
* Bar
  * Bar&apos;s subitem 1
  * Bar&apos;s subitem 2
  * Bar&apos;s subitem 3
* Baz
  * Baz&apos;s subitem 1
  * Baz&apos;s subitem 2
```

- Blockquote

```
&amp;gt; Part of documements with lines prepended with `&amp;gt;` is treated as a
&amp;gt; blockquote.
&amp;gt;
&amp;gt; &amp;gt; It may contain even nested block quote or lists:
&amp;gt; 
&amp;gt; * List item 1
&amp;gt; * List item 2
```

- Inline code (a.k.a code span)

```
Run shell command `ls` to get contents of the current directory.    
```
 
 - Code Block  

```
Set of lines enclosed within a lines formed by three (or more) consecutive
backticks (```) or tildes (~~~) is recognized as a code block.

Alternatively, the code may just be indented by four or more spaces:

    $ ./configure
    $ make
    $ make install

An [info string] can be provided after the opening code fence.
Although this spec doesn&apos;t mandate any particular treatment of
the info string, the first word is typically used to specify
the language of the code block. In HTML output, the language is
normally indicated by adding a class to the `code` element consisting
of `language-` followed by the language name.

example:

~~~ruby
def foo(x)
  return 3
end
~~~

will turn into:

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;def foo(x)
  return 3
end
&lt;/code&gt;&lt;/pre&gt;
```




## 🖋️[helix]() 

![Imagen]() 


# ⌨️ Mapa de teclass

*i-haklab* cuanta con diversas configuraciones de teclas que no son las que te topatias en un tutorial 

## Termux 

```shell
ctrl+u # borra todo a la izq
ctrl+k # borra todo a la der
ctrl+w # borra la ultima palabra
ctrl+l # limpia la pantalla
ctrl+y # restaura lo borrado
ctrl+e # mueve cursor al final de la linea
ctrl+a # mueve el cursor al inicio de la linea
```

#  🤖 Comandos adisionales

Los comandos a adicionales son funciones  que se agregan a `fpath` y se encuentran en `. zsh/functions`

## Como crear más 

**Agregar archivo en el directorio de carga automática**

- El nombre del archivo será el nombre del comando.
- No se necesita permiso ejecutable.
- No es necesario definir la función en el archivo.

**Agregar nuevo comando mediante carga automática**

```sh
autoload -U comamdo
```

En el directorio `plugins` es para lo que no son creados por nosotros ni la comunidad que puedes tener una lista de ellos [agui](https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins) 

Para agregar unos de ello solo clonelo en el directorio y ponga el nombre del mismo en el `. zshrc ` en plugins=(...). 



# 🙈 Reasignación de claves



# 🤗 SHELL (Default zsh) 

Contamos con `zsh` que es  un shell diseñado para uso interactivo, aunque también es un potente lenguaje de programación. Muchas de las funciones útiles de bash, ksh y tcsh se incorporaron a zsh; Se agregaron muchas características originales

## [globbing](https://zsh.sourceforge.io/Intro/intro_toc.html#SEC2)

```shell
% ls
Makefile   file.pro   foo.o      main.o     q.c        run234     stuff
bar.o      foo        link       morestuff  run123     run240     sub
file.h     foo.c      main.h     pipe       run2       run303
% ls *.c
foo.c  q.c
% ls *.[co]
bar.o   foo.c   foo.o   main.o  q.c
% ls foo.?
foo.c  foo.o
% ls *.[^c]
bar.o   file.h  foo.o   main.h  main.o
% ls *.[^oh]
foo.c  q.c  
```
Una expresión de la forma `&lt;x-y&gt;` coincide con un rango de números enteros:

```shell
% ls run&amp;lt;200-300&amp;gt; 
run234 run240 
% ls run&amp;lt;300-400&amp;gt; 
run303 
% ls run&amp;lt;-200&amp;gt; 
run123 run2 
% ls run&amp;lt;300-&amp;gt; 
run303 
% ls run&amp;lt;&amp;gt; 
run123 run2 run234 run240 run303
```
Es posible agrupar:

```shell
% ls (foo|bar).* 
bar.o foo.c foo.o 
% ls *.(c|o|pro) 
bar.o archivo.pro foo.c foo.o main.o qc
```

## [Archivos de inicio](https://zsh.sourceforge.io/Intro/intro_toc.html#SEC3)

Hay cinco archivos de inicio desde los que zsh leerá los comandos:

```shell
$ZDOTDIR/.zshenv
$ZDOTDIR/.zprofile
$ZDOTDIR/.zshrc
$ZDOTDIR/.zlogin
$ZDOTDIR/.zlogout
```

**zshenv:** Contien comandos para establecer la ruta de búsqueda de comandos, además de otras variables de entorno importantes.

**zshrc:** Debe contener comandos para configurar alias, funciones, opciones, combinaciones de teclas, etc.

**zlogin:** Debe contener comandos que deben ejecutarse sólo en shells de inicio de sesión. `.zlogout&apos; se obtiene cuando se cierran los shells de inicio de sesió

**zprofile:** pretende ser una alternativa a `.zlogin&apos; para los fanáticos de ksh.


# 🎨 TEMAS

**Por default (Powerlevel10k)**

![Powerlevel10k](
https://raw.githubusercontent.com/romkatv/powerlevel10k-media/master/prompt-styles-high-contrast.png)

Para agregar un tema en esta ruta para carga automática `. zsh/themes` 

# 👨‍🔧 Asistente de configuración

Escriba `p10k configure` para acceder al asistente de configuración incorporado directamente desde su terminal.

Para más información 👉 [agui](https://github.com/romkatv/powerlevel10k#configuration-wizard) 


# 📺 TMUX 

También vas a contar con `tmux` qué es un multiplexor de terminal para sistemas tipo unix, 
similar a GNU Screen o Byobu que permite dividir una consola en múltiples secciones o generar 
sesiones independientes en la misma terminal.

![Imagen]() 


## ⌨️ tmux 

Todos los comandos en `tmux` requieren el atajo de prefijo, que de forma predeterminada es `ctrl+b` pero en `I-haklab` es `ctrl+s` qué usaremos mucho el prefijo, así que es mejor simplemente guardarlo en la memoria.  
Después de ingresar `ctrl+s`, puede ejecutar un comando `tmux` o escribir: para obtener un mensaje de tmux. 


### 👨‍🔧 Configuracion

Ruta de alchivo de configuración 

```sh
~/.tmux.conf
```



# ⚰️ Desintalar laboratorio 

```sh
apt remove i-haklab 
```

&lt;/x-y&gt;&lt;/cr&gt;&lt;/cmd&gt;&lt;/leader&gt;&lt;/cr&gt;&lt;/cmd&gt;&lt;/leader&gt;&lt;/cr&gt;&lt;/cmd&gt;&lt;/leader&gt;&lt;/leader&gt;&lt;/leader&gt;&lt;/leader&gt;&lt;/leader&gt;&lt;/leader&gt;&lt;/leader&gt;&lt;/space&gt;&lt;/leader&gt;&lt;/C-b&gt;&lt;/C-b&gt;&lt;/C-b&gt;&lt;/leader&gt;&lt;/leader&gt;&lt;/leader&gt;&lt;/leader&gt;&lt;/leader&gt;&lt;/leader&gt;&lt;/cr&gt;&lt;/cmd&gt;&lt;/leader&gt;&lt;/leader&gt;&lt;/cr&gt;&lt;/cmd&gt;&lt;/space&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/nav&gt;&lt;/header&gt;</content><author><name>Demon Hunter</name></author><category term="Laboratorio" /><category term="Termux" /><category term="Linux" /><summary type="html">Inicio Tutoriales Cursos&amp;lt;/l&amp;gt; Bootcamps Contacto &amp;lt;/ul&amp;gt; &amp;lt;/nav&amp;gt; &amp;lt;/header&amp;gt; [1]: http://www.example.com</summary></entry><entry><title type="html">Alpine en termux</title><link href="http://localhost:4000/Alpine/" rel="alternate" type="text/html" title="Alpine en termux" /><published>2023-04-21T00:00:00-04:00</published><updated>2023-04-21T00:00:00-04:00</updated><id>http://localhost:4000/Alpine</id><content type="html" xml:base="http://localhost:4000/Alpine/">&lt;p&gt;Para tener corriendo Alpine en nuestro dispositivo vamos a nesecitar los siquiente. Con la finalidad de facilitar el uso de &lt;em&gt;Termux&lt;/em&gt; y mantenerlo lo más similar posible a las distribuciones Linux &lt;em&gt;@Ivam3&lt;/em&gt; a realizado la adaptación al gestor de paquetes Advance Package.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Puedes revisa el listado de todas las herramientas disponibles  &lt;a href=&quot;https://github.com/ivam3/termux-packages&quot;&gt;aqui&lt;/a&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;configuracion&quot;&gt;Configuracion&lt;/h1&gt;

&lt;p&gt;Para tener el acceso a todas las herramientas solo debes de agregar la llave(key) de acceso a las configuraciones de APT en Termux :&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PREFIX&lt;/span&gt;/etc/apt/sources.list.d 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;wget
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://raw.githubusercontent.com/ivam3/termux-packages/gh-pages/ivam3-termux-packages.list &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PREFIX&lt;/span&gt;/etc/apt/sources.list.d/ivam3-termux-packages.list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;actualiza-termux&quot;&gt;Actualiza Termux&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;En ese listado de &lt;a href=&quot;https://github.com/ivam3/termux-packages&quot;&gt;herramientas&lt;/a&gt;  que hemos optenido vamos a tener a &lt;strong&gt;termux-doker-qemu&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;❯ apt show  termux-docker-qemu                             
Package: termux-docker-qemu                                Version: 0.3.3
Maintainer: Ivam3 &amp;lt;https://t.me/Ivam3_Bot&amp;gt;
Installed-Size: 2048 B
Depends: termux-api, openssh, wget, procps, qemu-utils, qemu-common, qemu-system-x86-64-headless
Suggests: i-haklab
Homepage: https://www.docker.com/products/docker-desktop/
Download-Size: 3840 B
APT-Manual-Installed: &lt;span class=&quot;nb&quot;&gt;yes
&lt;/span&gt;APT-Sources: https://ivam3.github.io/termux-packages stable/extras all Packages
Description: Docker container &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;running x86,x86_64,armv7 and aarch64 Linux virtual machines using QEMU
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Esto nos va a facilitar virtualizar de una sistema operativo que por &lt;em&gt;default es alpinne&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;por-que-alpine&quot;&gt;Por que alpine&lt;/h3&gt;

&lt;p&gt;Solo cuenta con un peso minimo de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;133MB&lt;/code&gt; y por eso es  adecuado para  manejan contenedores, especialmente Docker. 💢&lt;/p&gt;

&lt;h1 id=&quot;intalacion&quot;&gt;Intalacion&lt;/h1&gt;

&lt;p&gt;Vamos a proceder a instalar &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;termux-doker-qemu&lt;/code&gt; com un:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;termux-doker-qemu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Puedes contar con una explicasion mas detallada de todo el proceso y configuracion en el sigiente video 👇 espero que lo disfrute&lt;/p&gt;

&lt;h1 id=&quot;video&quot;&gt;Video&lt;/h1&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/CXvTUEG1oPs&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;
    (function() { // DON&apos;T EDIT BELOW THIS LINE
    var d = document, s = d.createElement(&apos;script&apos;);
    s.src = &apos;https://blok-termux.disqus.com/embed.js&apos;;
    s.setAttribute(&apos;data-timestamp&apos;, +new Date());
    (d.head || d.body).appendChild(s);
    })();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;</content><author><name>Demon Hunter</name></author><category term="termux" /><category term="root" /><category term="termux" /><category term="intalacion" /><summary type="html">Para tener corriendo Alpine en nuestro dispositivo vamos a nesecitar los siquiente. Con la finalidad de facilitar el uso de Termux y mantenerlo lo más similar posible a las distribuciones Linux @Ivam3 a realizado la adaptación al gestor de paquetes Advance Package.</summary></entry><entry><title type="html">Notas de git</title><link href="http://localhost:4000/GIT/" rel="alternate" type="text/html" title="Notas de git" /><published>2023-04-20T00:00:00-04:00</published><updated>2023-04-20T00:00:00-04:00</updated><id>http://localhost:4000/GIT</id><content type="html" xml:base="http://localhost:4000/GIT/">&lt;p&gt;Para evitar tener que autenticarte cada vez que subes un proyecto a Git desde tu terminal, puedes usar un token de acceso personal de Git. Un token de acceso personal es una cadena de caracteres que funciona como una contraseña temporal que solo se te otorga una vez. Con este token puedes acceder a tu cuenta de Git sin la necesidad de ingresar tus credenciales completas en la línea de comandos.&lt;/p&gt;

&lt;p&gt;Para configurar un token de acceso personal, sigue estos pasos:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Ingrese a tu cuenta de Git y crea un nuevo token de acceso personal. Asegúrate de seleccionar los permisos necesarios para editar o subir proyectos.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Abre la línea de comandos de Linux y escribe lo siguiente:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config --global credential.helper store
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Esto configurará el almacenamiento de tus credenciales en un archivo en tu sistema local.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Ahora, cada vez que deseas autenticarte en Git desde la línea de comandos, ingresa tus credenciales una vez. Git almacenará tus credenciales en el archivo local, lo que significa que no tendrás que ingresarlas de nuevo en el futuro.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Para usar tu token de acceso personal, deberás actualizar tus credenciales en la línea de comandos de la siguiente manera:&lt;/p&gt;
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config --global credential.helper &apos;store --file ~/.my-credentials&apos;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Reemplaza &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.my-credentials&lt;/code&gt; con tu archivo configurado para almacenar tus credenciales. Luego ingresa tu nombre de usuario en Git y el token de acceso personal como contraseña.&lt;/p&gt;

&lt;p&gt;Con estos pasos, ya no tendrás que autenticarte cada vez que desees subir o editar un proyecto en Git desde la terminal de Linux.&lt;/p&gt;

&lt;h2 id=&quot;branches&quot;&gt;Branches&lt;/h2&gt;

&lt;p&gt;Las ramas son una parte muy importante de git.
 La ramificación permite hacer una “copia” de su proyecto de trabajo y cambiarlo sin afectar la rama principal (rama maestra), lo que brinda la oportunidad de trabajar en el mismo proyecto con diferentes compromisos.
 Cuando desee agregar una nueva función o corregir un error, sin importar cuán grande o pequeño sea, debe crear una nueva rama para encapsular sus cambios.&lt;/p&gt;

&lt;p&gt;Una vez finalizada la función, puede fusionarla con la rama principal.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;&amp;quot;/assets/images/GIT/branch_git.png&amp;quot;&quot; alt=&quot;branch_git&quot; /&gt;&lt;/p&gt;

&lt;p&gt;La creación de una nueva rama se realiza con el comando branch:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git branch my_new_branch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Luego, debemos cambiar a la sucursal usando el comando de pago:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  git checkout  my_new_branch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Hay un atajo para crear y cambiar a una nueva rama:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  git checkout &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; my_new_branch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Ahora, cada cambio realizado en la nueva rama llamada my_new_branch no afectará a la rama principal.
 Esto significa que puede trabajar con seguridad en el proyecto sin romper nada.  Cada sucursal tiene su propia historia, área de preparación y directorio de trabajo.&lt;/p&gt;

&lt;p&gt;Para ver la lista de sus sucursales, ejecute el comando ==git branch== en el directorio del proyecto.&lt;/p&gt;

&lt;h1 id=&quot;fusionar-sucursales&quot;&gt;Fusionar sucursales&lt;/h1&gt;

&lt;p&gt;Primero, necesitamos cambiar a la rama maestra:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Ahora fusionamos la rama con:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git merge &amp;lt;nombre_de_la_rama&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;eliminar-sucursales&quot;&gt;Eliminar sucursales&lt;/h1&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git branch &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &amp;lt;nombre_de_la_rama&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;
    (function() { // DON&apos;T EDIT BELOW THIS LINE
    var d = document, s = d.createElement(&apos;script&apos;);
    s.src = &apos;https://blok-termux.disqus.com/embed.js&apos;;
    s.setAttribute(&apos;data-timestamp&apos;, +new Date());
    (d.head || d.body).appendChild(s);
    })();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;</content><author><name>Demon Hunter</name></author><category term="soluciones" /><category term="notas" /><category term="termux" /><category term="tips" /><summary type="html">Para evitar tener que autenticarte cada vez que subes un proyecto a Git desde tu terminal, puedes usar un token de acceso personal de Git. Un token de acceso personal es una cadena de caracteres que funciona como una contraseña temporal que solo se te otorga una vez. Con este token puedes acceder a tu cuenta de Git sin la necesidad de ingresar tus credenciales completas en la línea de comandos.</summary></entry><entry><title type="html">Añadir carpeta a el PATH</title><link href="http://localhost:4000/path/" rel="alternate" type="text/html" title="Añadir carpeta a el PATH" /><published>2023-04-20T00:00:00-04:00</published><updated>2023-04-20T00:00:00-04:00</updated><id>http://localhost:4000/path</id><content type="html" xml:base="http://localhost:4000/path/">&lt;h2 id=&quot;cómo-añadir-carpetas-a-al-path-en-linux&quot;&gt;Cómo añadir carpetas a al PATH en Linux&lt;/h2&gt;

&lt;p&gt;Para añadir una carpeta al &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATH&lt;/code&gt; de Linux se usa el comando &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;export&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;:/home/usuario/ruta_a_la_carpeta_que_quiero_añadir
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Con esta orden le estamos diciento a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;export&lt;/code&gt; algo así: “&lt;em&gt;oye comando, quiero que la variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATH&lt;/code&gt; tenga todo que &lt;strong&gt;ya hay en ella&lt;/strong&gt;, más la carpeta que te pongo despues de los dos puntos&lt;/em&gt;“… ¿Entendido?&lt;/p&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;
    (function() { // DON&apos;T EDIT BELOW THIS LINE
    var d = document, s = d.createElement(&apos;script&apos;);
    s.src = &apos;https://blok-termux.disqus.com/embed.js&apos;;
    s.setAttribute(&apos;data-timestamp&apos;, +new Date());
    (d.head || d.body).appendChild(s);
    })();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;</content><author><name>Demon Hunter</name></author><category term="notas" /><category term="termux" /><category term="linux" /><summary type="html">Cómo añadir carpetas a al PATH en Linux</summary></entry><entry><title type="html">Alternativas para `ngrok`</title><link href="http://localhost:4000/ngrok_alternativas/" rel="alternate" type="text/html" title="Alternativas para `ngrok`" /><published>2023-04-18T00:00:00-04:00</published><updated>2023-04-18T00:00:00-04:00</updated><id>http://localhost:4000/ngrok_alternativas</id><content type="html" xml:base="http://localhost:4000/ngrok_alternativas/">&lt;p&gt;Ngrok es una aplicación desarrollada por Alan Shreeve , permite a los desarrolladores exponer sus servidores de desarrollo locales a Internet. Básicamente, crea un túnel a su servidor de desarrollo local y genera dos subdominios aleatorios en &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ngrok.com&lt;/code&gt;, uno &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http&lt;/code&gt; y otro con &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https&lt;/code&gt; pero en ocasiones tenemos problemas con dicho sevicio.&lt;/p&gt;

&lt;h1 id=&quot;lisa-de-acternativas&quot;&gt;Lisa de acternativas&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Opcion 1
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://pagekite.net
curl &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; https://pagekite.net/pk/pagekite.py 
python2 pagekite.py 80 yourname.pagekite.me
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Opcion 2
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://portmap.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Opcion 3
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://github.com/antoniomika/sish
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Opcion 4
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://forwardhq.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Opcion 5
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://www.beame.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Opcion 6
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://localhost.run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Opcion 7
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://holepunch.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Opcion 8
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://burrow.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;
    (function() { // DON&apos;T EDIT BELOW THIS LINE
    var d = document, s = d.createElement(&apos;script&apos;);
    s.src = &apos;https://blok-termux.disqus.com/embed.js&apos;;
    s.setAttribute(&apos;data-timestamp&apos;, +new Date());
    (d.head || d.body).appendChild(s);
    })();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;</content><author><name>Demon Hunter</name></author><category term="error" /><category term="termux" /><summary type="html">Ngrok es una aplicación desarrollada por Alan Shreeve , permite a los desarrolladores exponer sus servidores de desarrollo locales a Internet. Básicamente, crea un túnel a su servidor de desarrollo local y genera dos subdominios aleatorios en ngrok.com, uno http y otro con https pero en ocasiones tenemos problemas con dicho sevicio.</summary></entry></feed>